// Debug routes for development - Add these to your main index.ts for database viewing

// Add this endpoint to your Express app for development/debugging
app.post('/debug/sql', async (req, res) => {
  try {
    const { sql } = req.body;
    const result = await crudService.client.SQLQuery({ sql });
    res.json({ 
      success: true, 
      result,
      rowCount: result?.length || 0
    });
  } catch (error) {
    res.status(400).json({ 
      success: false, 
      error: (error as any).message 
    });
  }
});

// Get database schema information
app.get('/debug/schema', async (req, res) => {
  try {
    const tables = await crudService.client.SQLQuery({ 
      sql: "SELECT * FROM INFORMATION_SCHEMA.TABLES;" 
    });
    
    const indexes = await crudService.client.SQLQuery({ 
      sql: "SELECT * FROM INFORMATION_SCHEMA.INDEXES;" 
    });
    
    res.json({
      success: true,
      tables,
      indexes
    });
  } catch (error) {
    res.status(400).json({ 
      success: false, 
      error: (error as any).message 
    });
  }
});

// Get transaction history
app.get('/debug/transactions', async (req, res) => {
  try {
    // This would need to be implemented based on ImmuDB's transaction querying capabilities
    res.json({
      success: true,
      message: "Transaction history endpoint - implementation depends on ImmuDB client capabilities",
      suggestion: "Use ImmuDB Web Console at http://localhost:9497 for transaction viewing"
    });
  } catch (error) {
    res.status(400).json({ 
      success: false, 
      error: (error as any).message 
    });
  }
});

// Health check endpoint
app.get('/health', async (req, res) => {
  try {
    // Simple query to check database connection
    await crudService.client.SQLQuery({ sql: "SELECT 1;" });
    res.json({
      success: true,
      database: "connected",
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      database: "disconnected",
      error: (error as any).message,
      timestamp: new Date().toISOString()
    });
  }
});

/* 
Usage Examples:

1. Execute custom SQL query:
POST /debug/sql
{
  "sql": "SELECT COUNT(*) FROM users;"
}

2. Get schema information:
GET /debug/schema

3. Check database health:
GET /health

4. View transaction history:
GET /debug/transactions
*/
